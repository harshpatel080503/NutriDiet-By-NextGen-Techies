// ignore_for_file: use_build_context_synchronously, library_private_types_in_public_api

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:hive/hive.dart';
import 'package:myapp/page/demo.dart';
import 'package:myapp/page/homepage2.dart';

class PlanCheck {
  DateTime? lastPlanTime;

  // Load the last plan time from Hive storage
  Future<void> loadLastPlanTime() async {
    final box = Hive.box('userProfile');
    lastPlanTime = DateTime.tryParse(box.get('lastPlanTime') ?? '');
  }

  // Check if more than 24 hours have passed
  bool isTimeToCreateNewPlan() {
    if (lastPlanTime == null) {
      return true; // No last plan time means we should create a new plan
    }

    final currentTime = DateTime.now();
    final difference = currentTime.difference(lastPlanTime!).inHours;

    return difference >= 24; // More than 24 hours
  }
}

class LandingPage extends StatefulWidget {
  const LandingPage({super.key});

  @override
  _LandingPageState createState() => _LandingPageState();
}

class _LandingPageState extends State<LandingPage> {
  bool isLoading = true; // Loading state
  bool isSuccess = false; // Check if all conditions are met
  PlanCheck planCheck = PlanCheck();

  @override
  void initState() {
    super.initState();
    _checkPlan(); // Start the checks
  }

  Future<void> _checkPlan() async {
    await planCheck.loadLastPlanTime(); // Load last plan time

    // Check if it's time to create a new plan
    if (planCheck.isTimeToCreateNewPlan()) {
      await _callGeminiAIForNewPlan(); // Call API to get a new plan
    }

    setState(() {
      isLoading = false; // Update loading state
    });

    // Navigate to home screen after checks
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const FinalHome()),
    );
  }

  Future<void> _callGeminiAIForNewPlan() async {
    // Call the Gemini AI API here
    final box = Hive.box('userProfile');

    String prompt = '''
  Create a personalized nutrition plan for one day based on the following user information:
      Age: ${box.get("age")}
      Gender: ${box.get("gender")}
      Height: ${box.get("height")}
      Current Weight: ${box.get("weight")}
      Activity Level: ${box.get("activityLevel")}
      Diet Type: ${box.get("dietType")}
      Target Weight: ${box.get("targetWeight")}
      Food Preference: ${box.get("foodPreference")}
      Allergies: ${box.get("allergies")}
      Additional Notes: ${box.get("additionalNotes")}
      old data : ${box.get("histroy")}}
      Output Format:

      Daily Calorie Target: [Number] calories
      Macronutrient Breakdown:
      Protein: [Number] grams
      Carbohydrates: [Number] grams
      Fats: [Number] grams
      Meal Plan:
      Lunch: [Dish Name] (Ingredients: [List]) - [Calories]
      Dinner: [Dish Name] (Ingredients: [List]) - [Calories]
      General Tips:
      Tip 1: [Tip]
      Tip 2: [Tip]
      Tip 3: [Tip]
    ''';

    // Simulated API call for demonstration purposes
    await Future.delayed(const Duration(seconds: 2));

    // Save the new plan and update the last plan time
    final model = GenerativeModel(
        model: 'gemini-1.5-flash-latest',
        apiKey: "AIzaSyCKLL1KxCeuLKh3qsYWWpWYZlryKs422I4",
        generationConfig:
            GenerationConfig(responseMimeType: "application/json"));

    // print("start..........");
    final content = [Content.text(prompt)];
    final response = await model.generateContent(content);
    final data = response.text;
    final jsonData = jsonDecode(data!);
    // print(jsonData);

    box.put("plan", jsonData);
    box.put("lastPlanTime", DateTime.now());
    final olddata = box.get("histroy") ?? [];
    final value = [...olddata, jsonData];
    box.put("histroy", value);
    box.put('lastPlanTime', DateTime.now().toIso8601String());

    // Example of saving a new plan response (replace with actual response handling)
    box.put('newPlan', 'New plan generated by Gemini AI!');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: isLoading
            ? const Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 20),
                  Text('Checking your plan...'),
                ],
              )
            : const SizedBox(), // Or handle other UI states here
      ),
    );
  }
}
